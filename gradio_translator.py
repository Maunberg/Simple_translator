#!/usr/bin/env python3
"""
Gradio –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –º–æ–¥–µ–ª–∏ –ø–µ—Ä–µ–≤–æ–¥–∞
–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: python gradio_translator.py
"""

import gradio as gr
import torch
import json
import os
from model import Transformer
from tokenizer import Tokeniser


class GradioTranslator:
    def __init__(self, model_path='final_model_ru_de.pth', config_path='final_ru_de_config.json', vocab_path='vocab.json'):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–µ—Ä–µ–≤–æ–¥—á–∏–∫–∞ –¥–ª—è Gradio"""
        self.device = 'cuda' if torch.cuda.is_available() else 'cpu'
        print(f"–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ: {self.device}")
        
        # –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        if os.path.exists(config_path):
            with open(config_path, 'r') as f:
                self.config = json.load(f)['config']
        else:
            # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            self.config = {
                'd_model': 512,
                'num_heads': 8,
                'num_layers': 6,
                'd_ff': 2048,
                'max_seq_length': 128,
                'dropout': 0.1,
                'device': self.device
            }
        
        # –ó–∞–≥—Ä—É–∑–∫–∞ —Ç–æ–∫–µ–Ω–∏–∑–∞—Ç–æ—Ä–∞
        self.tokenizer = Tokeniser()
        if os.path.exists(vocab_path):
            self.tokenizer.load_vocab(vocab_path)
            print(f"–ó–∞–≥—Ä—É–∂–µ–Ω —Å–ª–æ–≤–∞—Ä—å —Ä–∞–∑–º–µ—Ä–æ–º: {len(self.tokenizer)}")
        else:
            raise FileNotFoundError(f"–°–ª–æ–≤–∞—Ä—å –Ω–µ –Ω–∞–π–¥–µ–Ω: {vocab_path}")
        
        # –ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–∏
        self.model = self._load_model(model_path)
        print("–ú–æ–¥–µ–ª—å –∑–∞–≥—Ä—É–∂–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
    
    def _load_model(self, model_path):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–∏"""
        if not os.path.exists(model_path):
            raise FileNotFoundError(f"–ú–æ–¥–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {model_path}")
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏
        model = Transformer(
            src_vocab_size=len(self.tokenizer),
            tgt_vocab_size=len(self.tokenizer),
            d_model=self.config['d_model'],
            num_heads=self.config['num_heads'],
            num_layers=self.config['num_layers'],
            d_ff=self.config['d_ff'],
            max_seq_length=self.config['max_seq_length'],
            dropout=self.config['dropout'],
            device=self.device
        )
        
        # –ó–∞–≥—Ä—É–∑–∫–∞ –≤–µ—Å–æ–≤
        model.load_state_dict(torch.load(model_path, map_location=self.device))
        model = model.to(self.device)
        model.eval()
        
        return model
    
    def translate(self, text, src_lang='rus', tgt_lang='deu', max_length=300):
        """–ü–µ—Ä–µ–≤–æ–¥ —Ç–µ–∫—Å—Ç–∞ —Å —É–∫–∞–∑–∞–Ω–∏–µ–º —è–∑—ã–∫–æ–≤"""
        if not text.strip():
            return ""
        
        try:
            # –ü–æ–ª—É—á–µ–Ω–∏–µ —è–∑—ã–∫–æ–≤—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤ —á–µ—Ä–µ–∑ —Ç–æ–∫–µ–Ω–∏–∑–∞—Ç–æ—Ä
            src_lang_token = self.tokenizer.get_lang_token(src_lang)
            tgt_lang_token = self.tokenizer.get_lang_token(tgt_lang)
            
            # –¢–æ–∫–µ–Ω–∏–∑–∞—Ü–∏—è –≤—Ö–æ–¥–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
            src_tokens = self.tokenizer.tokenize(text)
            bos_token = self.tokenizer.vocab_tokentoid.get('<BOS>', 1)
            eos_token = self.tokenizer.vocab_tokentoid.get('<EOS>', 2)
            
            # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —è–∑—ã–∫–æ–≤–æ–≥–æ —Ç–æ–∫–µ–Ω–∞ –∏—Å—Ç–æ—á–Ω–∏–∫–∞
            if src_lang_token:
                src_lang_tokens = self.tokenizer.tokenize(src_lang_token)
                src_tokens = [bos_token] + src_lang_tokens + src_tokens
            else:
                src_tokens = [bos_token] + src_tokens
            
            src_tokens = src_tokens + [eos_token]
            src_tensor = torch.tensor([src_tokens], dtype=torch.long).to(self.device)
            
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ü–µ–ª–µ–≤–æ–π –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —Å —è–∑—ã–∫–æ–≤—ã–º —Ç–æ–∫–µ–Ω–æ–º
            tgt_tokens = [bos_token]
            if tgt_lang_token:
                tgt_lang_tokens = self.tokenizer.tokenize(tgt_lang_token)
                tgt_tokens.extend(tgt_lang_tokens)
            
            with torch.no_grad():
                for _ in range(max_length):
                    tgt_tensor = torch.tensor([tgt_tokens], dtype=torch.long).to(self.device)
                    
                    # –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è
                    output = self.model(src_tensor, tgt_tensor)
                    next_token = output[0, -1, :].argmax().item()
                    
                    if next_token == eos_token:
                        break
                        
                    tgt_tokens.append(next_token)
            
            # –î–µ—Ç–æ–∫–µ–Ω–∏–∑–∞—Ü–∏—è (—É–±–∏—Ä–∞–µ–º BOS –∏ —è–∑—ã–∫–æ–≤–æ–π —Ç–æ–∫–µ–Ω)
            start_idx = 1
            if tgt_lang_token:
                # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —è–∑—ã–∫–æ–≤–æ–π —Ç–æ–∫–µ–Ω
                start_idx = 1 + len(tgt_lang_tokens)
            
            translated_text = self.tokenizer.totext(tgt_tokens[start_idx:])
            return translated_text.strip()
            
        except Exception as e:
            return f"–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–≤–æ–¥–∞: {str(e)}"


def create_gradio_interface():
    """–°–æ–∑–¥–∞–Ω–∏–µ Gradio –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞"""
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–µ—Ä–µ–≤–æ–¥—á–∏–∫–∞
    try:
        translator = GradioTranslator(
            model_path="/mnt/asr_hot/dutov/study/ml/lab_1_nlp/final_model_ru_de.pth",
            config_path="/mnt/asr_hot/dutov/study/ml/lab_1_nlp/final_ru_de_config.json",
            vocab_path="/mnt/asr_hot/dutov/study/ml/lab_1_nlp/vocab.json"
        )
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: {e}")
        return None
    
    # –î–æ—Å—Ç—É–ø–Ω—ã–µ —è–∑—ã–∫–∏
    languages = [
        ("–†—É—Å—Å–∫–∏–π", "rus"),
        ("–ù–µ–º–µ—Ü–∫–∏–π", "deu"),
        ("–ê–Ω–≥–ª–∏–π—Å–∫–∏–π", "eng"),
        ("–§—Ä–∞–Ω—Ü—É–∑—Å–∫–∏–π", "fra"),
        ("–ò—Å–ø–∞–Ω—Å–∫–∏–π", "spa"),
        ("–ò—Ç–∞–ª—å—è–Ω—Å–∫–∏–π", "ita"),
        ("–ü–æ—Ä—Ç—É–≥–∞–ª—å—Å–∫–∏–π", "por"),
        ("–¢—É—Ä–µ—Ü–∫–∏–π", "tur"),
        ("–Ø–ø–æ–Ω—Å–∫–∏–π", "jpn"),
        ("–≠—Å–ø–µ—Ä–∞–Ω—Ç–æ", "epo")
    ]
    
    def translate_text(text, source_lang, target_lang):
        """–§—É–Ω–∫—Ü–∏—è –ø–µ—Ä–µ–≤–æ–¥–∞ –¥–ª—è Gradio"""
        if not text.strip():
            return ""
        
        return translator.translate(text, source_lang, target_lang)
    
    def translate_examples():
        """–ü—Ä–∏–º–µ—Ä—ã –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏"""
        return [
            ["–ü—Ä–∏–≤–µ—Ç. –ö–∞–∫ –¥–µ–ª–∞?", "rus", "deu"],
            ["Hallo, wie geht's?", "deu", "rus"],
            ["–Ø —Ç–µ–±—è –ª—é–±–ª—é!", "rus", "deu"],
            ["Ich liebe dich.", "deu", "rus"],
        ]
    
    def swap_languages(source_lang, target_lang):
        """–§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–º–µ–Ω–∞ —è–∑—ã–∫–æ–≤ –º–µ—Å—Ç–∞–º–∏"""
        return target_lang, source_lang
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
    with gr.Blocks(
        title="–ù–µ–π—Ä–æ–Ω–Ω—ã–π –ü–µ—Ä–µ–≤–æ–¥—á–∏–∫",
        theme=gr.themes.Soft(),
        css="""
        .gradio-container {
            max-width: 1200px !important;
        }
        .translate-box {
            min-height: 200px;
        }
        #swap-button {
            margin: 5px 0;
            min-width: 50px;
        }
        #swap-button:hover {
            transform: rotate(180deg);
            transition: transform 0.3s ease;
        }
        #swap-label {
            text-align: center;
            font-size: 12px;
            margin: 5px 0;
        }
        """
    ) as interface:
        
        gr.Markdown(
            """
            # üåç –ù–µ–π—Ä–æ–Ω–Ω—ã–π –ü–µ—Ä–µ–≤–æ–¥—á–∏–∫
            –ú–Ω–æ–≥–æ—è–∑—ã—á–Ω—ã–π –ø–µ—Ä–µ–≤–æ–¥—á–∏–∫ –Ω–∞ –æ—Å–Ω–æ–≤–µ Transformer –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã.
            
            **–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —è–∑—ã–∫–∏:** –†—É—Å—Å–∫–∏–π, –ù–µ–º–µ—Ü–∫–∏–π, –ê–Ω–≥–ª–∏–π—Å–∫–∏–π, –§—Ä–∞–Ω—Ü—É–∑—Å–∫–∏–π, –ò—Å–ø–∞–Ω—Å–∫–∏–π, –ò—Ç–∞–ª—å—è–Ω—Å–∫–∏–π, –ü–æ—Ä—Ç—É–≥–∞–ª—å—Å–∫–∏–π, –¢—É—Ä–µ—Ü–∫–∏–π, –Ø–ø–æ–Ω—Å–∫–∏–π, –≠—Å–ø–µ—Ä–∞–Ω—Ç–æ
            """
        )
        
        with gr.Row():
            with gr.Column(scale=1):
                gr.Markdown("### üìù –í—Ö–æ–¥–Ω–æ–π —Ç–µ–∫—Å—Ç")
                input_text = gr.Textbox(
                    label="–¢–µ–∫—Å—Ç –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞",
                    placeholder="–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞...",
                    lines=5,
                    elem_classes=["translate-box"]
                )
                
                with gr.Row():
                    with gr.Column(scale=1):
                        source_lang = gr.Dropdown(
                            choices=languages,
                            value="rus",
                            label="–ò—Å—Ö–æ–¥–Ω—ã–π —è–∑—ã–∫",
                            info="–í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫ –∏—Å—Ö–æ–¥–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞"
                        )
                    
                    with gr.Column(scale=0, min_width=100):
                        gr.Markdown("**–ü–æ–º–µ–Ω—è—Ç—å**<br/>**—è–∑—ã–∫–∏**", elem_id="swap-label")
                        swap_btn = gr.Button(
                            "üîÑ",
                            size="sm",
                            variant="secondary",
                            elem_id="swap-button"
                        )
                    
                    with gr.Column(scale=1):
                        target_lang = gr.Dropdown(
                            choices=languages,
                            value="deu", 
                            label="–¶–µ–ª–µ–≤–æ–π —è–∑—ã–∫",
                            info="–í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫ –ø–µ—Ä–µ–≤–æ–¥–∞"
                        )
                
                translate_btn = gr.Button(
                    "üîÑ –ü–µ—Ä–µ–≤–µ—Å—Ç–∏",
                    variant="primary",
                    size="lg"
                )
                
                clear_btn = gr.Button(
                    "üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å",
                    variant="secondary"
                )
            
            with gr.Column(scale=1):
                gr.Markdown("### üì§ –†–µ–∑—É–ª—å—Ç–∞—Ç –ø–µ—Ä–µ–≤–æ–¥–∞")
                output_text = gr.Textbox(
                    label="–ü–µ—Ä–µ–≤–æ–¥",
                    lines=5,
                    interactive=False,
                    elem_classes=["translate-box"]
                )
        
        # –ü—Ä–∏–º–µ—Ä—ã
        gr.Markdown("### üí° –ü—Ä–∏–º–µ—Ä—ã")
        examples = gr.Examples(
            examples=translate_examples(),
            inputs=[input_text, source_lang, target_lang],
            label="–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –ø—Ä–∏–º–µ—Ä –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–µ—Ä–µ–≤–æ–¥–∞"
        )
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
        translate_btn.click(
            fn=translate_text,
            inputs=[input_text, source_lang, target_lang],
            outputs=output_text
        )
        
        clear_btn.click(
            fn=lambda: ("", "", ""),
            outputs=[input_text, source_lang, target_lang]
        )
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ –æ–±–º–µ–Ω–∞ —è–∑—ã–∫–æ–≤
        swap_btn.click(
            fn=swap_languages,
            inputs=[source_lang, target_lang],
            outputs=[source_lang, target_lang]
        )
        
        # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø–µ—Ä–µ–≤–æ–¥ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ç–µ–∫—Å—Ç–∞
        input_text.submit(
            fn=translate_text,
            inputs=[input_text, source_lang, target_lang],
            outputs=output_text
        )
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–æ–¥–µ–ª–∏
        with gr.Accordion("‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–æ–¥–µ–ª–∏", open=False):
            gr.Markdown(
                """
                **–ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞:** Transformer
                **–£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ:** {device}
                **–†–∞–∑–º–µ—Ä —Å–ª–æ–≤–∞—Ä—è:** {vocab_size}
                **–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏:** {max_length}
                
                **–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–µ—Ä–µ–≤–æ–¥–∞:**
                - –†—É—Å—Å–∫–∏–π ‚Üî –ù–µ–º–µ—Ü–∫–∏–π
                - –ú–æ–¥–µ–ª—å –¥–ª—è –¥—Ä—É–≥–∏—Ö –∫–æ–º–±–∏–Ω–∞—Ü–∏–π –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –æ–±—É—á–µ–Ω–∏—è
                """.format(
                    device=translator.device,
                    vocab_size=len(translator.tokenizer),
                    max_length=translator.config['max_seq_length']
                )
            )
    
    return interface


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ Gradio –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞"""
    print("–ó–∞–ø—É—Å–∫ Gradio –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞...")
    
    interface = create_gradio_interface()
    if interface is None:
        print("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞–ª–∏—á–∏–µ —Ñ–∞–π–ª–æ–≤ –º–æ–¥–µ–ª–∏.")
        return
    
    # –ó–∞–ø—É—Å–∫ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
    interface.launch(
        server_name="0.0.0.0",  # –î–æ—Å—Ç—É–ø —Å –ª—é–±–æ–≥–æ IP
        server_port=7860,       # –ü–æ—Ä—Ç
        share=True,            # –ù–µ —Å–æ–∑–¥–∞–≤–∞—Ç—å –ø—É–±–ª–∏—á–Ω—É—é —Å—Å—ã–ª–∫—É
        show_error=True,        # –ü–æ–∫–∞–∑—ã–≤–∞—Ç—å –æ—à–∏–±–∫–∏
        quiet=False,           # –ü–æ–∫–∞–∑—ã–≤–∞—Ç—å –ª–æ–≥–∏
    )


if __name__ == "__main__":
    main()
